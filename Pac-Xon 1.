Projekt podzielony na klasy (core.cs, Enemy.cs, Logic.cs, Map.cs, NormalEnemy.cs, Player.cs, Program.cs):
* "core.cs":

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using SDL2;

namespace sliwa2
{
    
    class core 
    {

        public bool running = true;

        public IntPtr win;
        public IntPtr render;
        IntPtr blockTexture;

        public core() 
        {
            SDL.SDL_Init(SDL.SDL_INIT_VIDEO | SDL.SDL_INIT_AUDIO);
            win = SDL.SDL_CreateWindow("PACMAN by Sliwa", 50, 50, 800, 500, SDL.SDL_WindowFlags.SDL_WINDOW_SHOWN);
            render = SDL.SDL_CreateRenderer(win, -1, SDL.SDL_RendererFlags.SDL_RENDERER_ACCELERATED);//| SDL.SDL_RendererFlags.SDL_RENDERER_PRESENTVSYNC);

            //SDL_mixer.Mix_OpenAudio(SDL_mixer.MIX_DEFAULT_FREQUENCY, SDL_mixer.MIX_DEFAULT_FORMAT, 2, 128);
            SDL.SDL_InitSubSystem(SDL.SDL_INIT_GAMECONTROLLER);
            SDL.SDL_SetRenderDrawColor(render, 0, 0, 0, 0);


            blockTexture = LoadTexture("block.png");


        }

        SDL.SDL_Event systemEvent;
        public void Events() 
        {
            while (SDL.SDL_PollEvent(out systemEvent) != 0)
            {
                if (systemEvent.type == SDL.SDL_EventType.SDL_QUIT)
                {
                    running = false;
                }
            }
        }

        public void Present()  
        {
            SDL.SDL_RenderPresent(render);
        }

        public void clear() 
        {
            SDL.SDL_SetRenderDrawColor(render, 0, 0, 0, 0);
            SDL.SDL_RenderClear(render);
        }

        public IntPtr LoadTexture(string filepath) 
        {
            return SDL_image.IMG_LoadTexture(render, filepath);
        }

        public void feedByMap(ref Map map) 
        {
            List<PixelToPrint> printingList = new List<PixelToPrint>(); 
            map.getPrintingList(ref printingList); 

            
            foreach (PixelToPrint pixel in printingList)
            {

                printPixel(pixel);
            }
        }

        public void feedByEnemies(List<Enemy> listOfEnemies) 
        {

            foreach (var enemy in listOfEnemies)
            {
                if (enemy.type == PixelType.ENEMY_NORMAL)
                    printRectangleRed(enemy.x, enemy.y, Map.SQUARE_SIZE);
            }
        }

        public void feedByPlayer(Player player) 
        {
            printRectangleYellow(player.xBlock * Map.SQUARE_SIZE, player.yBlock * Map.SQUARE_SIZE, Map.SQUARE_SIZE);


        }


        private void printPixel(PixelToPrint pixel) 
        {

            if (pixel.type == PixelType.BLOCK)
                DrawSprite(blockTexture,
                     new SDL.SDL_Rect() { x = 0, y = 0, w = 18, h = 18 },
                     new SDL.SDL_Rect() { x = pixel.colIndex, y = pixel.rowIndex, w = Map.SQUARE_SIZE, h = Map.SQUARE_SIZE }); 
            else if (pixel.type == PixelType.BUILDING)
                printRectangleBlue(pixel.rowIndex, pixel.colIndex, Map.SQUARE_SIZE);

        }


        private void printRectangleYellow(int i, int j, int size) 
        {
            SDL.SDL_Rect fillRect = new SDL.SDL_Rect() { x = j, y = i, w = size, h = size };
            SDL.SDL_SetRenderDrawColor(render, 241, 244, 65, 0xFF);
            SDL.SDL_RenderFillRect(render, ref fillRect);

        }

        private void printRectangleBlue(int i, int j, int size)
        {
            SDL.SDL_Rect fillRect = new SDL.SDL_Rect() { x = j, y = i, w = size, h = size };

            SDL.SDL_SetRenderDrawColor(render, 66, 188, 244, 0xFF);
            SDL.SDL_RenderFillRect(render, ref fillRect);

        }

        private void printRectangleRed(int i, int j, int size)
        {
            SDL.SDL_Rect fillRect = new SDL.SDL_Rect() { x = j, y = i, w = size, h = size };

            SDL.SDL_SetRenderDrawColor(render, 0xFF, 0x00, 0x00, 0xFF);
            SDL.SDL_RenderFillRect(render, ref fillRect);

        }

        public void DrawSprite(IntPtr myTexture, SDL.SDL_Rect sourceRect, SDL.SDL_Rect destinationRect)
        {
            SDL.SDL_RenderCopy(render, myTexture, ref sourceRect, ref destinationRect);
            SDL.SDL_SetRenderDrawColor(render, 0, 0, 0, 0);

        }

        public Player.MovePlayer getMoveDirectionFromPlayer() 
        {
            Player.MovePlayer move = Player.MovePlayer.NOTHING;

            //Handle events on queue
            while (SDL.SDL_PollEvent(out systemEvent) != 0)
            {
                //User requests quit

                if (systemEvent.type == SDL.SDL_EventType.SDL_KEYDOWN)
                {

                    //Select surfaces based on key press
                    switch (systemEvent.key.keysym.sym)
                    {
                        case SDL.SDL_Keycode.SDLK_UP:
                            move = Player.MovePlayer.UP;
                            break;

                        case SDL.SDL_Keycode.SDLK_DOWN:
                            move = Player.MovePlayer.DOWN;
                            break;

                        case SDL.SDL_Keycode.SDLK_LEFT:
                            move = Player.MovePlayer.LEFT;
                            break;

                        case SDL.SDL_Keycode.SDLK_RIGHT:
                            move = Player.MovePlayer.RIGHT;
                            break;

                        default:
                            break;
                    }
                }
            }

            return move;
        }
    }
}

* "Enemy.cs":

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace sliwa2
{
    abstract class Enemy 
    {
        static private Random random = new Random(); 
        
        public int x; 
        public int y;  
        public PixelType type; 

        public abstract void move(); 
        public abstract void solveCollision(Logic.CollisionSide side); 

        public bool isCollison(int x, int y) 
        {
           
            if(Math.Abs(this.x - x) < Map.SQUARE_SIZE &&  Math.Abs(this.y - y )< Map.SQUARE_SIZE) 
                return true;
            else 
                return false;
        }

        protected bool randomBool() 
        {
            return random.NextDouble() >= 0.5;

        }

        protected int randomInt(int start, int end) 
        {
            return random.Next(start, end);

        }
    }
}

* "Logic.cs":

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace sliwa2
{
    class Logic 
    {

        private bool running = true; 
        private int lifes = 3; 
        public enum CollisionSide { UP, DOWN, LEFT, RIGHT };


        public bool  isGame()
        {
            return running && lifes >= 0; 
        }

        public void moveEnemies(List<Enemy> enemies) 
        {
            foreach (var enemy in enemies)
            {
                enemy.move();
            }
        }


        public void enemyPlayerCollison(List<Enemy> enemies, Player player) 
        {
            foreach (var enemy in enemies) 
            {
                if (enemy.isCollison(player.xBlock * Map.SQUARE_SIZE, player.yBlock * Map.SQUARE_SIZE)) 
                {
                    lifes--; 
                    player.reset();
                }
            }
        }

      

        public void solveCollisions(ref List<Enemy> enemies, ref Map map) 
        {

            foreach (Enemy enemy in enemies)
            {
                bool collision = false;
                CollisionSide side = 0;


                

                if (!map.isEmpty(enemy.x + Map.SQUARE_SIZE / 2, enemy.y-1)) 
                {
                    collision = true;
                    side = CollisionSide.LEFT;
                }
                else if (!map.isEmpty(enemy.x-1, enemy.y + Map.SQUARE_SIZE / 2 ))
                {
                    collision = true;
                    side = CollisionSide.UP;
                }
                else if (!map.isEmpty(enemy.x + Map.SQUARE_SIZE / 2, enemy.y + Map.SQUARE_SIZE+1))
                {
                    collision = true;
                    side = CollisionSide.RIGHT;
                }
                else if (!map.isEmpty(enemy.x + Map.SQUARE_SIZE+1, enemy.y + Map.SQUARE_SIZE / 2))
                {
                    collision = true;
                    side = CollisionSide.DOWN;
                }

                if (collision) 
                {
                    enemy.solveCollision(side);
                }

            }


        }

   

    }
}

* "Map.cs":

using System.Collections.Generic;

namespace sliwa2
{

    enum PixelType { EMPTY, BLOCK, ENEMY_NORMAL, PLAYER, BUILDING };

    struct PixelToPrint 
    {
        public int rowIndex; 
        public int colIndex; 
        public PixelType type; 

        public PixelToPrint(int rowIndex, int colIndex, PixelType type) 
        {
            this.rowIndex = rowIndex; 
            this.colIndex = colIndex;
            this.type = type;

        }
    }



    class Map 
    {

        
        public const int MAP_HEIGHT = 400;
        public const int MAP_WIDTH = 700;
        public const int SQUARE_SIZE = 15;
        public const int MAX_ROW_INDEX = MAP_HEIGHT / SQUARE_SIZE - 1;
        public const int MAX_COL_INDEX = MAP_WIDTH / SQUARE_SIZE - 1;


        PixelType[,] mapPixels; 



        public Map() 
        {
            mapPixels = new PixelType[MAP_HEIGHT, MAP_WIDTH]; 
            fill(0, MAX_ROW_INDEX, 0, MAX_COL_INDEX, PixelType.EMPTY); 
            fillRow(0, PixelType.BLOCK); 
            fillRow(MAX_ROW_INDEX, PixelType.BLOCK); 
            fillCol(0, PixelType.BLOCK);
            fillCol(MAX_COL_INDEX, PixelType.BLOCK);

        }
      

        public bool isEmpty(int x, int y) 
        {

            return mapPixels[x, y] == PixelType.EMPTY;
        
        }


        public void build(int xBlock, int yBlock) 
        {
            fill(startOfSquare(xBlock), endOfSquare(xBlock), startOfSquare(yBlock), endOfSquare(yBlock), PixelType.BUILDING);

        }




        public void getPrintingList(ref List<PixelToPrint> resultList) 
        {

           
            for (int i = 0; i < MAX_ROW_INDEX + 1; i++)
                for (int j = 0; j < MAX_COL_INDEX + 1; j++)
                    resultList.Add(new PixelToPrint(i * SQUARE_SIZE, j * SQUARE_SIZE, mapPixels[i * SQUARE_SIZE, j * SQUARE_SIZE])); 
                   

        }


        private int startOfSquare(int index) 
        {
            return index * SQUARE_SIZE;
        }
        private int endOfSquare(int index) 
        {
            return startOfSquare(index) + SQUARE_SIZE;
        }

     


        private void fill(int startPixelX, int endPixelX, int startPixelY, int endPixelY, PixelType type) 
        {
            for (int i = startPixelX; i < endPixelX; i++)
            {
                for (int j = startPixelY; j < endPixelY; j++)
                {
                    mapPixels[i, j] = type;
                }
            }
        }

        private void fillRow(int rowIndex, PixelType valueToFill)
        {
            fill(startOfSquare(rowIndex), startOfSquare(rowIndex + 1), startOfSquare(0), startOfSquare(MAX_COL_INDEX + 1), valueToFill);
        }

        private void fillCol(int colIndex, PixelType valueToFill)
        {
            fill(startOfSquare(0), startOfSquare(MAX_ROW_INDEX + 1), startOfSquare(colIndex), startOfSquare(colIndex + 1), valueToFill);
        }


        private int getPixel(int indexOfBlock)
        {
            return indexOfBlock * SQUARE_SIZE;
        }

    }
}

*"NormalEnemy.cs":

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace sliwa2
{
    class NormalEnemy : Enemy 
    {
        int directionX;
        int directionY;
        

     

        private int randomDirection()
        {
            if (randomBool())
                return -1;
            else
                return 1;
        }

        public NormalEnemy() 
        {
            type = PixelType.ENEMY_NORMAL; 

            x = randomInt(Map.SQUARE_SIZE*4, Map.MAP_HEIGHT- 4*Map.SQUARE_SIZE-1); 
            y = randomInt(Map.SQUARE_SIZE*4, Map.MAP_WIDTH - 4*Map.SQUARE_SIZE-1);


            directionX = randomDirection();
            directionY = randomDirection();
         
            
           

        }

        public override void move()
        {
            x += directionX;
            y += directionY;
        }

        public override void solveCollision(Logic.CollisionSide side) 
        {
            if(side == Logic.CollisionSide.DOWN || side == Logic.CollisionSide.UP)
                directionX *= -1; 
            else if (side == Logic.CollisionSide.LEFT || side == Logic.CollisionSide.RIGHT)
                directionY *= -1;

        }
    }
}

*"Player.cs":

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace sliwa2
{
    class Player 
    {
        public enum MovePlayer { UP, DOWN, LEFT, RIGHT, NOTHING};

        public int xBlock = 0; 
        public int yBlock = 0;

    
        public void reset() 
        {
            xBlock = 0; 
            yBlock = 0;
      }

        public void move(MovePlayer type, Map map) 
        {

            


            if (type == MovePlayer.UP && xBlock > 0)
                xBlock--;
            else if (type == MovePlayer.DOWN && xBlock < Map.MAX_ROW_INDEX)
                xBlock++;
            else if (type == MovePlayer.LEFT && yBlock > 0)
                yBlock--;
            else if (type == MovePlayer.RIGHT && yBlock < Map.MAX_COL_INDEX)
                yBlock++;

            if(map.isEmpty(xBlock * Map.SQUARE_SIZE, yBlock*Map.SQUARE_SIZE)) 
            {
                map.build(xBlock,yBlock);
            }
            
            
        }
    }
}

*"Program.cs":

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SDL2;


namespace sliwa2
{
    class Program
    {
        static void Main(string[] args)
        {


            core myCore = new core(); 

           

            
            IntPtr gc = SDL2.SDL.SDL_GameControllerOpen(0);



            Map map = new Map(); 
            List<Enemy> enemies = new List<Enemy>(); 
            enemies.Add(new NormalEnemy());
            enemies.Add(new NormalEnemy());
            enemies.Add(new NormalEnemy());
            enemies.Add(new NormalEnemy());
            enemies.Add(new NormalEnemy());


            Player player = new Player(); 

         

            Logic logic = new Logic(); 

            while (logic.isGame()) 
            {

                logic.moveEnemies(enemies); 
                logic.enemyPlayerCollison(enemies, player); 
                logic.solveCollisions(ref enemies, ref map); 
                Player.MovePlayer nextMove = myCore.getMoveDirectionFromPlayer();  
                player.move(nextMove, map); 


                myCore.Events();

                

                
                myCore.feedByMap(ref map); 
                myCore.feedByEnemies(enemies); 
                myCore.feedByPlayer(player); 

                myCore.Present(); 
                myCore.clear(); 
                System.Threading.Thread.Sleep(10); 
            }

        }
    }
}

